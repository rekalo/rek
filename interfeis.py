#3. –ú–æ–¥—É–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞ (bot_interface.py)
import json
import http.client
from news_parser import normalize_url

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8399667774:AAEYrsNonQW0t8wKZhhvAoLzr1BUbtH3WL4"
BASE_URL = "api.telegram.org"

def format_article_detail(article):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ"""
    title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
    description = article.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
    link = article.get('link', '')
    
    if link:
        link = normalize_url(link)
    
    response = f"<b>{title}</b>\n\n"
    response += f"<i>{description}</i>\n\n"
    
    if link:
        response += f"üîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ itProger</a>"
    
    return response

def format_articles_response(articles, show_numbers=True):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    if not articles:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
    
    response = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å itProger:</b>\n\n"
    
    for i, article in enumerate(articles, 1):
        title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        description = article.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
        
        if show_numbers:
            response += f"<b>{i}. {title}</b>\n"
        else:
            response += f"<b>{title}</b>\n"
            
        response += f"<i>üìù {description}</i>\n\n"
        
        if len(response) > 3500:
            response += "... –∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—å–∏"
            break
    
    return response

def create_news_keyboard(articles, user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    keyboard = []
    
    for i, article in enumerate(articles, 1):
        title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        button_text = title[:30] + "..." if len(title) > 30 else title
        
        keyboard.append([{
            "text": f"{i}. {button_text}",
            "callback_data": f"article_{i}"
        }])
    
    keyboard.append([
        {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "refresh_news"},
        {"text": "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "callback_data": "show_favorites"}
    ])
    
    return {"inline_keyboard": keyboard}

def create_article_detail_keyboard(article_index, articles, user_id, is_in_favorites_func):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—å–∏"""
    article = articles[article_index - 1] if article_index <= len(articles) else {}
    title = article.get('title', '')
    
    if not title:
        return {"inline_keyboard": []}
    
    is_fav = is_in_favorites_func(user_id, title)
    favorite_text = "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_fav else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    favorite_action = "remove_fav" if is_fav else "add_fav"
    
    article_link = article.get('link', '')
    if article_link:
        article_link = normalize_url(article_link)
    else:
        article_link = 'https://itproger.com/news'
    
    keyboard = [
        [{"text": favorite_text, "callback_data": f"{favorite_action}_{article_index}"}],
        [{"text": "üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é", "url": article_link}],
        [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "callback_data": "back_to_list"}]
    ]
    
    return {"inline_keyboard": keyboard}

def create_favorites_keyboard(user_id, get_user_favorites_func):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    favorites = get_user_favorites_func(user_id)
    keyboard = []
    
    for i, fav in enumerate(favorites, 1):
        title = fav.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        button_text = title[:30] + "..." if len(title) > 30 else title
        
        keyboard.append([{
            "text": f"{i}. {button_text}",
            "callback_data": f"fav_{i}"
        }])
    
    if favorites:
        keyboard.append([{"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "callback_data": "clear_favorites"}])
    
    keyboard.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_list"}])
    
    return {"inline_keyboard": keyboard}

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        if len(text) > 4096:
            text = text[:4090] + "..."
            
        conn = http.client.HTTPSConnection(BASE_URL)
        url = f"/bot{TOKEN}/sendMessage"
        params = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': False
        }
        
        if reply_markup:
            params['reply_markup'] = reply_markup
            
        headers = {'Content-type': 'application/json'}
        conn.request("POST", url, json.dumps(params), headers)
        response = conn.getresponse()
        return response.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def edit_message_reply_markup(chat_id, message_id, reply_markup=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        conn = http.client.HTTPSConnection(BASE_URL)
        url = f"/bot{TOKEN}/editMessageReplyMarkup"
        params = {
            'chat_id': chat_id,
            'message_id': message_id
        }
        
        if reply_markup:
            params['reply_markup'] = reply_markup
            
        headers = {'Content-type': 'application/json'}
        conn.request("POST", url, json.dumps(params), headers)
        response = conn.getresponse()
        return response.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def get_updates(offset=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API"""
    try:
        conn = http.client.HTTPSConnection(BASE_URL)
        url = f"/bot{TOKEN}/getUpdates?timeout=60"
        if offset:
            url += f"&offset={offset}"
        conn.request("GET", url)
        response = conn.getresponse()
        data = response.read().decode()
        return json.loads(data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {"result": []}