#4. –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ (main_bot.py)

import time
from news_parser import get_itproger_news, parse_news, fetch_url, normalize_url
from database import (
    init_database, save_user, log_request, save_news_to_cache, 
    get_cached_news, add_to_favorites, remove_from_favorites, 
    is_in_favorites, get_user_favorites, get_user_stats
)
from bot_interface import (
    send_message, edit_message_reply_markup, get_updates,
    format_article_detail, format_articles_response,
    create_news_keyboard, create_article_detail_keyboard, create_favorites_keyboard
)

def handle_callback_query(callback_query, current_articles):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    user_id = callback_query["from"]["id"]
    chat_id = callback_query["message"]["chat"]["id"]
    message_id = callback_query["message"]["message_id"]
    data = callback_query["data"]
    
    save_user(callback_query["from"])
    
    if data == "refresh_news":
        articles = get_itproger_news(use_cache=False, get_cached_news_func=get_cached_news)
        if articles:
            save_news_to_cache(articles)
            response = "üîÑ <b>–ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n" + format_articles_response(articles)
            keyboard = create_news_keyboard(articles, user_id)
            send_message(chat_id, response, keyboard)
        else:
            send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
            
    elif data == "show_favorites":
        favorites = get_user_favorites(user_id)
        if favorites:
            response = "‚≠ê <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n"
            for i, fav in enumerate(favorites, 1):
                response += f"<b>{i}. {fav['title']}</b>\n"
                response += f"<i>üìù {fav.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}</i>\n\n"
            
            keyboard = create_favorites_keyboard(user_id, get_user_favorites)
            send_message(chat_id, response, keyboard)
        else:
            send_message(chat_id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
            
    elif data == "back_to_list":
        articles = current_articles or get_cached_news()
        response = format_articles_response(articles)
        keyboard = create_news_keyboard(articles, user_id)
        edit_message_reply_markup(chat_id, message_id, keyboard)
        send_message(chat_id, response, keyboard)
        
    elif data == "clear_favorites":
        from database import sqlite3
        conn = sqlite3.connect('news_bot.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM favorites WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        send_message(chat_id, "‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ")
        
    elif data.startswith("article_"):
        article_index = int(data.split("_")[1])
        articles = current_articles or get_cached_news()
        
        if 0 < article_index <= len(articles):
            article = articles[article_index - 1]
            response = format_article_detail(article)
            keyboard = create_article_detail_keyboard(article_index, articles, user_id, is_in_favorites)
            send_message(chat_id, response, keyboard)
            
    elif data.startswith("fav_"):
        fav_index = int(data.split("_")[1])
        favorites = get_user_favorites(user_id)
        
        if 0 < fav_index <= len(favorites):
            fav = favorites[fav_index - 1]
            response = f"<b>{fav['title']}</b>\n\n"
            response += f"<i>{fav.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}</i>\n\n"
            
            link = fav.get('link', '')
            if link:
                link = normalize_url(link)
                response += f"üîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é</a>"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "callback_data": f"remove_fav_title_{fav_index}"}],
                    [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É", "callback_data": "show_favorites"}]
                ]
            }
            send_message(chat_id, response, keyboard)
            
    elif data.startswith("add_fav_"):
        article_index = int(data.split("_")[2])
        articles = current_articles or get_cached_news()
        
        if 0 < article_index <= len(articles):
            article = articles[article_index - 1]
            add_to_favorites(user_id, article['title'], article.get('description', ''), article.get('link', ''))
            keyboard = create_article_detail_keyboard(article_index, articles, user_id, is_in_favorites)
            edit_message_reply_markup(chat_id, message_id, keyboard)
            
    elif data.startswith("remove_fav_"):
        if data.startswith("remove_fav_title_"):
            fav_index = int(data.split("_")[3])
            favorites = get_user_favorites(user_id)
            
            if 0 < fav_index <= len(favorites):
                fav_title = favorites[fav_index - 1]['title']
                remove_from_favorites(user_id, fav_title)
                send_message(chat_id, f"‚úÖ –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {fav_title}")
        else:
            article_index = int(data.split("_")[2])
            articles = current_articles or get_cached_news()
            
            if 0 < article_index <= len(articles):
                article = articles[article_index - 1]
                remove_from_favorites(user_id, article['title'])
                keyboard = create_article_detail_keyboard(article_index, articles, user_id, is_in_favorites)
                edit_message_reply_markup(chat_id, message_id, keyboard)

def handle_user_message(message, current_articles):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message["chat"]["id"]
    text = message["text"].strip()
    user_id = message["from"]["id"]
    
    save_user(message["from"])
    log_request(user_id, text)
    
    if text.startswith("http"):
        text = normalize_url(text)
        html = fetch_url(text)
        if html:
            if "itproger.com/news" in text:
                articles = parse_news(html)
                if articles:
                    save_news_to_cache(articles)
                    current_articles[chat_id] = articles
                    response = format_articles_response(articles)
                    keyboard = create_news_keyboard(articles, user_id)
                    send_message(chat_id, response, keyboard)
                else:
                    send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            else:
                send_message(chat_id, "üîó –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥–µ itproger.com/news\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ—Ç —Å–∞–π—Ç –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /news")
        else:
            send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL.")
            
    elif text == "/start":
        response = """üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π itProger</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/news - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/favorites - –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üîó <b>–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:</b>
https://itproger.com/news"""
        send_message(chat_id, response)
        
    elif text == "/news":
        articles = get_itproger_news(get_cached_news_func=get_cached_news)
        if articles:
            current_articles[chat_id] = articles
            response = format_articles_response(articles)
            keyboard = create_news_keyboard(articles, user_id)
            send_message(chat_id, response, keyboard)
        else:
            send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å itproger.com")
            
    elif text == "/favorites":
        favorites = get_user_favorites(user_id)
        if favorites:
            response = "‚≠ê <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n"
            for i, fav in enumerate(favorites, 1):
                response += f"<b>{i}. {fav['title']}</b>\n"
            
            keyboard = create_favorites_keyboard(user_id, get_user_favorites)
            send_message(chat_id, response, keyboard)
        else:
            send_message(chat_id, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
            
    elif text == "/stats":
        stats = get_user_stats(user_id)
        response = f"""üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üì® –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É: {stats['request_count']}
‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {stats['favorites_count']}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity'][:16]}"""
        send_message(chat_id, response)
        
    elif text == "/help":
        response = """‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ itproger.com/news

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/news - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/favorites - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å—Ç–∞—Ç—å–∏
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
‚Ä¢ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        send_message(chat_id, response)
            
    else:
        response = """‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/news - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ itProger
/favorites - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –°–ø—Ä–∞–≤–∫–∞"""
        send_message(chat_id, response)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    init_database()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    offset = 0
    current_articles = {}
    
    while True:
        try:
            updates = get_updates(offset)
            
            if "result" in updates:
                for update in updates["result"]:
                    offset = update["update_id"] + 1
                    
                    if "callback_query" in update:
                        chat_id = update["callback_query"]["message"]["chat"]["id"]
                        handle_callback_query(update["callback_query"], current_articles.get(chat_id))
                        
                    elif "message" in update and "text" in update["message"]:
                        handle_user_message(update["message"], current_articles)
            
            time.sleep(1)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(5)

if __name__ == "__main__":
    main()