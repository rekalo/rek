import http.client
import json
import urllib.parse
from html.parser import HTMLParser
import time

class NewsParser(HTMLParser):
    def __init__(self):
        super().__init__()
        self.articles = []
        self.current_article = {}
        self.in_article = False
        self.in_title_span = False
        self.in_description = False
        self.title_collected = False
        self.description_collected = False
        
    def handle_starttag(self, tag, attrs):
        attrs_dict = dict(attrs)
        
        if tag == 'div' and attrs_dict.get('class') == 'article':
            self.in_article = True
            self.current_article = {}
            self.title_collected = False
            self.description_collected = False
            
        elif tag == 'span' and self.in_article and not self.title_collected:
            self.in_title_span = True
            
        elif tag == 'span' and self.in_article and self.title_collected and not self.description_collected:
            self.in_description = True

    def handle_endtag(self, tag):
        if tag == 'div' and self.in_article:
            if self.current_article and ('title' in self.current_article or 'description' in self.current_article):
                self.articles.append(self.current_article.copy())
            self.in_article = False
            self.current_article = {}
        elif tag == 'span':
            self.in_title_span = False
            self.in_description = False

    def handle_data(self, data):
        data = data.strip()
        if not data:
            return
            
        if self.in_title_span and self.in_article and not self.title_collected:
            self.current_article['title'] = data
            self.title_collected = True
                
        elif self.in_description and self.in_article and not self.description_collected:
            self.current_article['description'] = data
            self.description_collected = True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8399667774:AAEYrsNonQW0t8wKZhhvAoLzr1BUbtH3WL4"
BASE_URL = "api.telegram.org"

def get_updates(offset=None):
    try:
        conn = http.client.HTTPSConnection(BASE_URL)
        url = f"/bot{TOKEN}/getUpdates?timeout=60"
        if offset:
            url += f"&offset={offset}"
        conn.request("GET", url)
        response = conn.getresponse()
        data = response.read().decode()
        return json.loads(data)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return {"result": []}

def send_message(chat_id, text):
    try:
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        if len(text) > 4096:
            text = text[:4090] + "..."
            
        conn = http.client.HTTPSConnection(BASE_URL)
        url = f"/bot{TOKEN}/sendMessage"
        params = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        headers = {'Content-type': 'application/json'}
        conn.request("POST", url, json.dumps(params), headers)
        response = conn.getresponse()
        return response.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def fetch_url(url):
    try:
        parsed = urllib.parse.urlparse(url)
        conn = http.client.HTTPSConnection(parsed.netloc)
        path = parsed.path
        if parsed.query:
            path += '?' + parsed.query
            
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        conn.request("GET", path, headers=headers)
        response = conn.getresponse()
        
        if response.status == 200:
            return response.read().decode('utf-8', errors='ignore')
        else:
            print(f"HTTP –æ—à–∏–±–∫–∞: {response.status}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ URL: {e}")
        return None

def parse_news(html):
    parser = NewsParser()
    parser.feed(html)
    return parser.articles

def format_articles_response(articles):
    if not articles:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
    
    response = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å itProger:</b>\n\n"
    
    for i, article in enumerate(articles, 1):
        title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        description = article.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
        
        response += f"<b>{i}. {title}</b>\n"
        response += f"<i>üìù {description}</i>\n\n"
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
        if len(response) > 3500:
            response += "... –∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—å–∏"
            break
    
    return response

def get_itproger_news():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å itproger.com/news"""
    html = fetch_url("https://itproger.com/news")
    if html:
        articles = parse_news(html)
        return format_articles_response(articles)
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Å itproger.com"

def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    offset = 0
    
    while True:
        try:
            updates = get_updates(offset)
            
            if "result" in updates:
                for update in updates["result"]:
                    offset = update["update_id"] + 1
                    
                    if "message" in update and "text" in update["message"]:
                        message = update["message"]
                        chat_id = message["chat"]["id"]
                        text = message["text"].strip()
                        
                        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
                        
                        if text.startswith("http"):
                            # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å—Å—ã–ª–∫–µ
                            html = fetch_url(text)
                            if html:
                                if "itproger.com/news" in text:
                                    articles = parse_news(html)
                                    response = format_articles_response(articles)
                                else:
                                    response = "üîó –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥–µ itproger.com/news\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ—Ç —Å–∞–π—Ç –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /news"
                            else:
                                response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL."
                                
                        elif text == "/start":
                            response = """üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π itProger</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/news - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å itproger.com
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üîó <b>–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:</b>
https://itproger.com/news"""
                            
                        elif text == "/news":
                            response = get_itproger_news()
                            
                        elif text == "/help":
                            response = """‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ itproger.com/news

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/news - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É:</b>
https://itproger.com/news"""
                            
                        else:
                            response = """‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/news - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ itProger
/help - –°–ø—Ä–∞–≤–∫–∞

üîó <b>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:</b>
https://itproger.com/news"""
                        
                        send_message(chat_id, response)
                        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            time.sleep(1)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(5)

if __name__ == "__main__":
    main()