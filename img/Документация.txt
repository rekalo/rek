News Parser Bot - Документация
📋 О проекте
News Parser Bot - это Telegram бот для парсинга новостей с сайта itproger.com. Бот предоставляет удобный интерфейс для просмотра последних новостей, управления избранными статьями и получения статистики.

🏗 Архитектура проекта
Проект разделен на 4 основных модуля:

🔗 Системный анализ проекта
Функциональные и нефункциональные требования

Технические характеристики системы

Ограничения и возможности

🔗 План архитектуры системы
Общая архитектура системы

Компоненты и их взаимодействие

Схемы данных и потоков

📁 Структура кода
1. Модуль парсера новостей
Назначение: Парсинг HTML и извлечение данных с itproger.com

Основные компоненты:

NewsParser - HTML парсер для извлечения статей

fetch_url() - загрузка веб-страниц

parse_news() - основная функция парсинга

normalize_url() - нормализация URL адресов

Функциональность:

Извлечение заголовков, описаний и ссылок на статьи

Обработка относительных и абсолютных URL

Корректировка проблем со слэшами в путях

2. Модуль базы данных
Назначение: Работа с SQLite базой данных

Таблицы:

users - данные пользователей

requests - история запросов

news_cache - кешированные новости

favorites - избранные статьи

Основные функции:

init_database() - инициализация БД

save_user() - сохранение пользователей

save_news_to_cache() - кеширование новостей

Управление избранным (добавление/удаление)

3. Модуль интерфейса бота
Назначение: Взаимодействие с Telegram API

Компоненты:

send_message() - отправка сообщений

create_*_keyboard() - создание инлайн-кнопок

format_*_response() - форматирование ответов

Работа с Telegram Bot API

Функциональность:

Инлайн-клавиатуры для навигации

Форматирование текста (HTML)

Обработка callback запросов

4. Главный модуль бота
Назначение: Основная логика приложения

Основные функции:

main() - главный цикл бота

handle_callback_query() - обработка кнопок

handle_user_message() - обработка команд

Координация работы всех модулей

🚀 Основные возможности
Команды бота:
/start - начать работу

/news - получить свежие новости

/favorites - избранные статьи

/stats - статистика пользователя

/help - справка

Инлайн-кнопки:
📰 Просмотр деталей статьи

⭐ Добавление/удаление из избранного

🔗 Прямые ссылки на статьи

🔄 Обновление списка новостей

📊 Управление избранным

🛠 Технологии
Python 3.x - основной язык

SQLite - база данных

Telegram Bot API - платформа

HTMLParser - парсинг веб-страниц

http.client - HTTP запросы

📊 Особенности системы
✅ Кеширование новостей для снижения нагрузки

✅ Статистика использования для каждого пользователя

✅ Управление избранными статьями

✅ Интуитивный интерфейс с инлайн-кнопками

✅ Обработка ошибок и устойчивость к сбоям

✅ Нормализация URL для корректной работы ссылок

🔧 Установка и запуск
Установите зависимости:

bash
pip install python-telegram-bot sqlite3
Настройте токен бота в bot_interface.py

Запустите бота:

bash
python main_bot.py
Документация подготовлена: News Parser Bot Team

🏗 Граф архитектуры News Parser Bot
text
┌─────────────────────────────────────────────────────────────────┐
│                    NEWS PARSER BOT SYSTEM                       │
└─────────────────────────────────────────────────────────────────┘

                              │
                              ▼
┌─────────────────────────────────────────────────────────────────┐
│                      TELEGRAM PLATFORM                          │
│  ┌─────────────────┐    ┌─────────────────┐                     │
│  │    Users        │◄──►│   Bot API       │                     │
│  │                 │    │                 │                     │
│  │ • Send commands │    │ • getUpdates()  │                     │
│  │ • Interact with │    │ • sendMessage() │                     │
│  │   inline buttons│    │ • editMessage() │                     │
│  └─────────────────┘    └─────────────────┘                     │
└─────────────────────────────────────────────────────────────────┘
                              │
                              ▼
┌─────────────────────────────────────────────────────────────────┐
│                    MAIN BOT CONTROLLER                          │
│  ┌─────────────────────────────────────────────────────────────┐ │
│  │                    main_bot.py                              │ │
│  │  ┌─────────────────┐    ┌─────────────────┐                 │ │
│  │  │ handle_user_    │    │ handle_callback_│                 │ │
│  │  │ message()       │    │ query()         │                 │ │
│  │  │                 │    │                 │                 │ │
│  │  │ • Process text  │    │ • Process       │                 │ │
│  │  │   commands      │    │   inline button │                 │ │
│  │  │ • Route to      │    │   clicks        │                 │ │
│  │  │   appropriate   │    │ • Update        │                 │ │
│  │  │   modules       │    │   keyboards     │                 │ │
│  │  └─────────────────┘    └─────────────────┘                 │ │
│  └─────────────────────────────────────────────────────────────┘ │
└─────────────────────────────────────────────────────────────────┘
                              │
        ┌─────────────────────┼─────────────────────┐
        ▼                     ▼                     ▼
┌───────────────┐    ┌─────────────────┐    ┌───────────────┐
│ NEWS PARSER   │    │ BOT INTERFACE   │    │ DATABASE      │
│ MODULE        │    │ MODULE          │    │ MODULE        │
├───────────────┤    ├─────────────────┤    ├───────────────┤
│ news_parser.py│    │ bot_interface.py│    │ database.py   │
│               │    │                 │    │               │
│ • HTML parsing│    │ • Message       │    │ • SQLite      │
│ • URL fetching│    │   formatting    │    │   operations  │
│ • Data        │    │ • Inline        │    │ • User        │
│   extraction  │    │   keyboards     │    │   management  │
│ • URL         │    │ • Telegram API  │    │ • News caching│
│   normalization│   │   communication │    │ • Favorites   │
└───────────────┘    └─────────────────┘    └───────────────┘
        │                     │                     │
        └─────────────────────┼─────────────────────┘
                              │
                              ▼
┌─────────────────────────────────────────────────────────────────┐
│                      EXTERNAL SERVICES                          │
│  ┌─────────────────┐    ┌─────────────────┐                     │
│  │   itproger.com  │    │   SQLite DB     │                     │
│  │                 │    │                 │                     │
│  │ • News source   │    │ • Persistent    │                     │
│  │ • Web scraping  │    │   data storage  │                     │
│  │   target        │    │ • Local file    │                     │
│  └─────────────────┘    └─────────────────┘                     │
└─────────────────────────────────────────────────────────────────┘
🔄 Граф потоков данных
text
┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   USER      │───►│ TELEGRAM    │───►│ MAIN BOT    │
│  INPUT      │    │   API       │    │ CONTROLLER  │
└─────────────┘    └─────────────┘    └─────────────┘
                                              │
                ┌─────────────┐              │
                │ DATABASE    │◄─────────────┤
                │ OPERATIONS  │              │
                └─────────────┘              │
                      │                      │
                ┌─────────────┐              │
                │ DATA        │              │
                │ PROCESSING  │◄─────────────┤
                └─────────────┘              │
                      │                      │
                ┌─────────────┐              │
                │ RESPONSE    │──────────────┘
                │ GENERATION  │
                └─────────────┘
                      │
                ┌─────────────┐    ┌─────────────┐
                │ FORMATTED   │───►│ TELEGRAM    │───►│ USER     │
                │ OUTPUT      │    │   API       │    │ OUTPUT   │
                └─────────────┘    └─────────────┘    └─────────────┘
🗂 Граф модулей и зависимостей
text
main_bot.py (Главный контроллер)
    ├── depends on: bot_interface.py
    ├── depends on: database.py  
    └── depends on: news_parser.py

bot_interface.py (Интерфейс Telegram)
    ├── provides: send_message(), create_keyboards()
    ├── uses: news_parser.normalize_url()
    └── communicates with: Telegram Bot API

database.py (Управление данными)
    ├── provides: user_operations(), news_caching()
    ├── provides: favorites_management()
    └── uses: SQLite database file

news_parser.py (Парсинг новостей)
    ├── provides: fetch_url(), parse_news()
    ├── provides: NewsParser class
    └── communicates with: itproger.com
🎯 Граф функциональных возможностей
text
News Parser Bot
├── 📰 News Management
│   ├── Fetch latest news from itproger.com
│   ├── Parse HTML content
│   ├── Cache news data
│   └── Refresh news on demand
│
├── ⭐ Favorites System
│   ├── Add articles to favorites
│   ├── Remove from favorites
│   ├── View favorites list
│   └── Clear all favorites
│
├── 👤 User Management
│   ├── User registration
│   ├── Activity tracking
│   ├── Usage statistics
│   └── Request logging
│
├── 🎨 User Interface
│   ├── Text commands (/start, /news, etc.)
│   ├── Inline keyboards
│   ├── Article details view
│   └── Navigation controls
│
└── 🛠 Technical Features
    ├── Error handling
    ├── URL normalization
    ├── Database operations
    └── API communication
📊 Граф базы данных
text
SQLite Database (news_bot.db)
├── users
│   ├── user_id (PK)
│   ├── username
│   ├── first_name
│   ├── last_name
│   ├── created_at
│   └── last_activity
│
├── requests
│   ├── id (PK)
│   ├── user_id (FK → users)
│   ├── command
│   └── timestamp
│
├── news_cache
│   ├── id (PK)
│   ├── title (UNIQUE)
│   ├── description
│   ├── source_url
│   ├── link
│   └── parsed_at
│
└── favorites
    ├── id (PK)
    ├── user_id (FK → users)
    ├── news_title
    ├── news_description
    ├── news_link
    └── saved_at
Этот граф показывает:

Вертикальную архитектуру от пользователя к данным

Горизонтальное разделение ответственности между модулями

Потоки данных между компонентами

Зависимости между модулями

Структуру базы данных

Граф демонстрирует хорошо спроектированную модульную архитектуру с четким разделением обязанностей между компонентами.


